using System.Web.Mvc;using Apeek.Common;using Apeek.Core.Services;using Apeek.Web.Framework.ControllerHelpers;using Apeek.Web.Framework.Controllers;using System.Text;using System.Security.Cryptography;using System;using Apeek.Common.Encription;using System.Linq;using Apeek.ViewModels.Models;using System.Collections.Generic;using System.IO;
using System.Web;

namespace Momentarily.Web.Areas.Frontend.Controller{    public class MessageController : FrontendController    {        private readonly MessageControllerHelper _helper;        private readonly IUserMessageService _userMessageService;        static string key { get; set; } = "A!9HHhi%XjjYY4YP2@Nob009X";        public MessageController(IUserMessageService userMessageService)        {            _helper = new MessageControllerHelper();            _userMessageService = userMessageService;        }        [Authorize]        [HttpGet]        public ActionResult Index()        {
            if (!_helper.UserHasAccess())                return RedirectToHome();            var result = _helper.GetMessages();            if (result == null) return RedirectToHome();

            var shape = _shapeFactory.BuildShape(null, result, PageName.UserMessage.ToString());

            return shape != null ? DisplayShape(shape) : RedirectToHome();        }        public static string Encrypt(string text)        {            using (var md5 = new MD5CryptoServiceProvider())            {                using (var tdes = new TripleDESCryptoServiceProvider())                {                    tdes.Key = md5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));                    tdes.Mode = CipherMode.ECB;                    tdes.Padding = PaddingMode.PKCS7;                    using (var transform = tdes.CreateEncryptor())                    {                        byte[] textBytes = UTF8Encoding.UTF8.GetBytes(text);                        byte[] bytes = transform.TransformFinalBlock(textBytes, 0, textBytes.Length);                        return Convert.ToBase64String(bytes, 0, bytes.Length);                    }                }            }        }        public static string Decrypt(string cipher)        {            using (var md5 = new MD5CryptoServiceProvider())            {                using (var tdes = new TripleDESCryptoServiceProvider())                {                    tdes.Key = md5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));                    tdes.Mode = CipherMode.ECB;                    tdes.Padding = PaddingMode.PKCS7;                    using (var transform = tdes.CreateDecryptor())                    {                        byte[] cipherBytes = Convert.FromBase64String(cipher);                        byte[] bytes = transform.TransformFinalBlock(cipherBytes, 0, cipherBytes.Length);                        return UTF8Encoding.UTF8.GetString(bytes);                    }                }            }        }        [Authorize]        [HttpGet]        public ActionResult Conversation(string userId)        {            try            {                if (!_helper.UserHasAccess())                    return RedirectToHome();                int check = 0;                Int32.TryParse(userId, out check);                if (check != 0)                {                    var result = _helper.GetConversation(check);                    if (result == null) return RedirectToHome();                    var shape = _shapeFactory.BuildShape(null, result, PageName.UserMessageConversation.ToString());                    return shape != null ? DisplayShape(shape) : RedirectToHome();                }                else                {                    byte[] data = Convert.FromBase64String(userId);                    string decodedUserIdString = Encoding.UTF8.GetString(data);                    int convertedUserId = Convert.ToInt32(decodedUserIdString);                    var result = _helper.GetConversation(convertedUserId);                    if (result == null) return RedirectToHome();                    var shape = _shapeFactory.BuildShape(null, result, PageName.UserMessageConversation.ToString());                    return shape != null ? DisplayShape(shape) : RedirectToHome();                }            }            catch            {                return RedirectToHome();            }        }        [Authorize]        [HttpGet]        public JsonResult GetUnreadMessages(string userId)        {            List<UserMessageViewModel> messagelist = new List<UserMessageViewModel>();
            var result = _helper.GetConversation(Convert.ToInt32(userId));
            if (result != null &&  result.Messages!=null&& result.Messages.Count > 0)
            {
                messagelist = result.Messages.Where(x => x.IsRead == false).OrderBy(x => x.DateCreated).ToList();
                //messagelist.Remove("");
                _helper.SetIsRead(Convert.ToInt32(userId));                foreach (var message in messagelist)
                {                    var msg = message.Message;                    message.Message = msg.Replace(@"\", string.Empty);                }
            }            return Json(new { messagelist = messagelist }, JsonRequestBehavior.AllowGet);        }        [HttpGet]        public int GetUnreadCount(string userId)        {            int count = 0;            try            {
                var result = _helper.GetConversation(Convert.ToInt32(userId));
                if (result != null && result.Messages.Count > 0)                {                    count = result.Messages.Where(x => x.IsRead == false).Count();                }            }            catch            {                count = 0;            }            return count;        }

        }}