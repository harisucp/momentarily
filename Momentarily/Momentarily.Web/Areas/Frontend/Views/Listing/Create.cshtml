@using Momentarily.Common.Definitions
@model Momentarily.ViewModels.Models.CreateMomentarilyItemViewModel

@{

    Layout = "~/Areas/Frontend/Views/Shared/_AccountMenuLayout.cshtml";
}
<link href="~/Content/CustomCssFiles/ListingPage.css" rel="stylesheet" />
<div class="content" data-ng-controller="ListingEditController as listingEditController">
    <div class="container account item">
        <div class="container">
            <div class="row">
                <div class="col-md-9 col-md-offset-3">
                    <div class="listing-container createlist">
                        <div class="title-block separated-block with-buttons">
                            <h1 class="left-align back">
                                <span class="back-button">
                                    <a href='@Url.Action("Index","Listing")'>
                                        <i class="fa fa-chevron-left" aria-hidden="true"></i>
                                    </a>
                                </span>
                                <span data-ng-bind="listingEditController.itemExists() ? 'Edit item' : 'Add New Listing'"></span>
                            </h1>
                        </div>

                        <div style="display: none" class="list-empty">You have no item listed!</div>
                        <form id="createItemForm" name="create" class="item-form form-horizontal" data-ng-submit="listingEditController.submitForm($event, create)" action="Create" method="post" novalidate>

                            <input type="hidden" name="Id" value="{{listingEditController.item.Id}}" />
                            @Html.HiddenFor(x => x.Item.Id)
                            @for (var i = 0; i < Model.Item.GoodPropertyValues.Count; i++)
                            {
                                <input type="hidden" name="GoodPropertyValues[@i].Key" value='@Model.Item.GoodPropertyValues.Keys.ElementAt(i)' />
                                <input type="hidden" name="GoodPropertyValues[@i].Value.Id" value='@Model.Item.GoodPropertyValues.Values.ElementAt(i).Id' />
                                <input type="hidden" name="GoodPropertyValues[@i].Value.Value" value='{{@String.Format("listingEditController.item.GoodPropertyValues.{0}.Value", Model.Item.GoodPropertyValues.Keys.ElementAt(i))}}' />
                                <input type="hidden" name="GoodPropertyValues[@i].Value.PropertyValueDefinitionId" value='{{@String.Format("listingEditController.item.GoodPropertyValues.{0}.PropertyValueDefinitionId", Model.Item.GoodPropertyValues.Keys.ElementAt(i))}}' />
                            }
                            <div class="form-group">
                                <label for="category" class="col-md-2">Category</label>
                                <div class="col-md-5">
                                    <select class="js-example-basic-multiple" id="select2-Id" style="width:100%" name="states[]" multiple="multiple" apply-select2 ng-model=" listingEditController.item.CategorList">
                                        <option ng-repeat="item in listingEditController.categories" value="{{item.id}}">{{item.text}}</option>
                                    </select>
                                    @*@Html.DropDownList("CategoryId", (MultiSelectList)ViewBag.Categories, new { multiple = "multiple"})*@
                                    <input type="hidden" id="CategorList" name="CategorList" value="{{listingEditController.item.CategorList}}" />
                                    @*<ui-select name="CategorySelect"
                                                   class="input-style-home type-select account-input"
                                                   data-ng-model="listingEditController.item.CategoryId"
                                                   data-ng-class="{'error-input': (create.TypeSelect.$dirty || create.$submitted) && create.TypeSelect.$error.required}"
                                                   theme="select2"
                                                   required>
                                            <ui-select-match placeholder="Select category">
                                                <span data-ng-bind="$select.selected.Value" class="selected"></span>
                                            </ui-select-match>

                                            <ui-select-choices repeat="category.Key as category in listingEditController.categories">
                                                <span data-ng-bind="category.Value"></span>
                                            </ui-select-choices>

                                        </ui-select>*@
                                </div>
                                @*<input type="text" name="CategorList" value="{{listingEditController.item.CategorList}}" />*@
                                @*<span class="error-msg"
                                          data-ng-show="(create.CategorySelect.$dirty || create.$submitted) && create.CategorySelect.$error.required">
                                        Required
                                    </span>*@
                            </div>
                            <div class="form-group">
                                <label for="name" class="col-md-2">Name</label>
                                <div class="col-md-5">
                                    <input name="Name"
                                           data-ng-model="listingEditController.item.Name"
                                           class="form-control account-input"
                                           data-ng-class="{'error-input': (create.Name.$dirty || create.$submitted) && (create.Name.$error.required ||          create.Name.$error.maxlength)}"
                                           id="name"
                                           placeholder="Enter name"
                                           data-ng-maxlength="100"
                                           required>
                                </div>

                                <span class="error-msg"
                                      data-ng-show="(create.Name.$dirty || create.$submitted) && create.Name.$error.required">
                                    Required
                                </span>
                                <span class="error-msg"
                                      data-ng-show="(create.Name.$dirty || create.$submitted) && create.Name.$error.maxlength">
                                    Max length is 100 symbols
                                </span>
                            </div>

                            <div class="form-group">
                                <label for="description" class="col-md-2">Description</label>
                                <div class="col-md-5">
                                    <textarea name="Description"
                                              data-ng-model="listingEditController.item.Description"
                                              class="form-control account-input"
                                              data-ng-class="{'error-input': (create.Description.$dirty || create.$submitted) && (create.Description.$error.required || create.Description.$error.maxlength)}"
                                              id="description"
                                              placeholder="Enter description"
                                              data-ng-maxlength="500"
                                              required></textarea>
                                </div>
                                <span class="error-msg"
                                      data-ng-show="(create.Description.$dirty || create.$submitted) && create.Description.$error.required">
                                    Required
                                </span>
                                <span class="error-msg"
                                      data-ng-show="(create.Name.$dirty || create.$submitted) && create.Description.$error.maxlength">
                                    Max length is 500 symbols
                                </span>
                            </div>

                            <div class="form-group">
                                <label class="col-md-2">Rent Period</label>
                                <div class="col-md-5">
                                    <span class="rentPeriodSection">
                                        <input type="checkbox" name="RentPeriodDay" data-ng-model="listingEditController.item.RentPeriodDay" data-ng-value="listingEditController.item.RentPeriodDay"> <label>Day</label>
                                        <input type="checkbox" name="RentPeriodWeek" data-ng-model="listingEditController.item.RentPeriodWeek" data-ng-value="listingEditController.item.RentPeriodWeek"> <label>Week</label>
                                    </span>
                                    @* <input type="checkbox" name="RentPeriodMonth" ng-model="listingEditController.item.RentPeriodMonth" ng-value="listingEditController.item.RentPeriodMonth"><label>Month</label>*@
                                </div>

                            </div>

                            <div class="form-group" data-ng-if="listingEditController.item.RentPeriodDay">
                                <label for="price" class="col-md-2">Price per day</label>
                                <div class="col-md-2">
                                    <input name="Price"
                                           data-ng-model="listingEditController.item.Price"
                                           type="text"
                                           class="form-control account-input inputBox"
                                           data-ng-class="{'error-input': (create.Price.$dirty || create.$submitted) && (create.Price.$error.required || create.Price.$error.min)}"
                                           id="price"
                                           placeholder="$"
                                           allow-only-numbers
                                           @*min="1" max="10000"
                                   prevent-typing-greater*@
                                           required>
                                </div>

                                <span class="error-msg"
                                      data-ng-show="(create.Price.$dirty || create.$submitted) && create.Price.$error.required">
                                    Required
                                </span>
                                <span class="error-priceDay" style="display:none">
                                    Maximum 15,000 exceeded.
                                </span>
                                <span class="error-msg"
                                      data-ng-show="(create.Price.$dirty || create.$submitted) && create.Price.$error.min">
                                    Min price is 1 USD
                                </span>
                            </div>

                            <div class="form-group" data-ng-if="listingEditController.item.RentPeriodWeek">
                                <label for="pricePerWeek" class="col-md-2">Price per week</label>
                                <div class="col-md-2">
                                    <input name="PricePerWeek"
                                           data-ng-model="listingEditController.item.PricePerWeek"
                                           type="text"
                                           class="form-control account-input inputBox"
                                           data-ng-class="{'error-input': (create.PricePerWeek.$dirty || create.$submitted) && (create.PricePerWeek.$error.required || create.PricePerWeek.$error.min)}"
                                           id="pricePerWeek"
                                           placeholder="$"
                                           allow-only-numbers
                                           @*min="1" max="10000"
                                   prevent-typing-greater*@
                                           required>
                                </div>
                                <span class="error-msg"
                                      data-ng-show="(create.PricePerWeek.$dirty || create.$submitted) && create.PricePerWeek.$error.required">
                                    Required
                                </span>
                                <span class="error-priceWeek" style="display:none">
                                    Maximum 15,000 exceeded.
                                </span>
                                <span class="error-msg"
                                      data-ng-show="(create.PricePerWeek.$dirty || create.$submitted) && create.PricePerWeek.$error.min">
                                    Min price per week is 1 USD
                                </span>
                            </div>

                            <div class="form-group" data-ng-if="listingEditController.item.RentPeriodMonth">
                                <label for="pricePerMonth" class="col-md-2">Price per month</label>
                                <div class="col-md-2">
                                    <input name="PricePerMonth"
                                           data-ng-model="listingEditController.item.PricePerMonth"
                                           type="text"
                                           class="form-control account-input"
                                           data-ng-class="{'error-input': (create.PricePerMonth.$dirty || create.$submitted) && (create.PricePerMonth.$error.required || create.PricePerMonth.$error.min)}"
                                           id="pricePerMonth"
                                           placeholder="$"
                                           allow-only-numbers
                                           required>
                                </div>
                                <span class="error-msg"
                                      data-ng-show="(create.PricePerMonth.$dirty || create.$submitted) && create.PricePerMonth.$error.required">
                                    Required
                                </span>
                                <span class="error-msg"
                                      data-ng-show="(create.PricePerMonth.$dirty || create.$submitted) && create.PricePerMonth.$error.min">
                                    Min price per month is 1 USD
                                </span>
                            </div>

                            <div class="form-group">
                                <label for="deposit" class="col-md-2">Security Deposit</label>
                                <div class="col-md-2">
                                    <input name="Deposit"
                                           data-ng-model='@String.Format("listingEditController.item.GoodPropertyValues.{0}.Value", MomentarilyItemProperties.MomentarilyItemDeposit)'
                                           type="text"
                                           min="1"
                                           class="form-control account-input"
                                           data-ng-class="{'error-input': (create.Deposit.$dirty || create.$submitted) && (create.Deposit.$error.required || create.Deposit.$error.min)}"
                                           id="deposit"
                                           placeholder="$"
                                           allow-only-numbers
                                           required>
                                </div>

                                <span class="error-msg"
                                      data-ng-show="(create.Deposit.$dirty || create.$submitted) && create.Deposit.$error.required">
                                    Required
                                </span>
                                <span class="error-msg"
                                      data-ng-show="(create.Deposit.$dirty || create.$submitted) && create.Deposit.$error.min">
                                    Min price is 1 USD
                                </span>
                            </div>

                            <div class="form-group">
                                <label for="Location" class="col-md-2">Pick Up Location</label>
                                <div class="col-md-5">
                                    <input name="Location"
                                           autocomplete-location
                                           data-ng-model='@String.Format("listingEditController.item.GoodPropertyValues.{0}.Value", MomentarilyItemProperties.MomentarilyItemLocation)'
                                           class="form-control account-input"
                                           data-ng-class="{'error-input': (create.Location.$dirty || create.$submitted) && (create.Location.$error.required || create.Location.$error.autocompleter)}"
                                           placeholder="Enter location"
                                           latitude="listingEditController.item.GoodLocation.Latitude"
                                           longitude="listingEditController.item.GoodLocation.Longitude"
                                           place-filter="address"
                                           required>
                                </div>

                                <input type="hidden" name="GoodLocation.Latitude" value="{{listingEditController.item.GoodLocation.Latitude}}" />
                                <input type="hidden" name="GoodLocation.Longitude" value="{{listingEditController.item.GoodLocation.Longitude}}" />

                                <span class="error-msg"
                                      data-ng-show="(create.Location.$dirty || create.$submitted) && create.Location.$error.required">
                                    Required
                                </span>
                                <span class="error-msg"
                                      data-ng-show="(create.Location.$dirty || create.$submitted) && create.Location.$error.autocompleter">
                                    You must select location from the list
                                </span>
                            </div>

                            <div class="form-group">
                                <div class="col-md-5 col-md-offset-2">
                                    <input type="checkbox" name="AgreeToDeliver" data-ng-model="listingEditController.item.AgreeToDeliver" data-ng-value="listingEditController.item.AgreeToDeliver" />
                                    <label for="description">Agree to deliver</label>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-5 col-md-offset-2">
                                    <input type="checkbox" name="AgreeToShareImmediately"
                                           data-ng-model="listingEditController.item.AgreeToShareImmediately"
                                           data-ng-value="listingEditController.item.AgreeToShareImmediately"
                                           title="This option means that your item will be automatically shared to anyone who books it" />
                                    <label for="description">Agree to share immediately</label>
                                </div>
                            </div>

                            <div data-ng-controller="DatePickerController as DatePicker" class="multiple-datepicker form-group">
                                <label class="col-md-2">Select dates to share the item</label>
                                <div class="col-md-10">
                                    <button type="button"
                                            class="account-input"
                                            data-ng-show="showPopup!==true"
                                            data-ng-click="showPopup=true">
                                        <i class="glyphicon glyphicon-calendar"></i>
                                    </button>
                                    <button type="button"
                                            class="btn btn-green-reverse"
                                            data-ng-hide="showPopup!==true"
                                            data-ng-click="showPopup=false">
                                        Close calendar
                                    </button>
                                </div>
                                <div class="panel" data-ng-hide="showPopup!==true">
                                    <div data-ng-show="showPopup===true">
                                        <h3>Selection Type:</h3>
                                        <div class="btn-group">
                                            <button class="btn btn-primary" type="button" data-ng-model="DatePicker.type" uib-btn-radio="'individual'">Individual</button>
                                            <button class="btn btn-primary" type="button" data-ng-model="DatePicker.type" uib-btn-radio="'range'">Range</button>
                                        </div>
                                    </div>
                                </div>
                                <input type="hidden" name="GoodShareDates[{{$index}}]" data-ng-value="date" data-ng-repeat="date in listingEditController.item.GoodShareDates" />
                                <table>
                                    <tr>
                                        <td data-ng-show="showPopup===true">
                                            <uib-datepicker data-ng-model="DatePicker.activeDate"
                                                            class="datepicker"
                                                            show-weeks="false"
                                                            multi-select="DatePicker.selectedDates"
                                                            select-range="{{DatePicker.type=='range'}}">
                                            </uib-datepicker>
                                        </td>
                                        @*<td data-ng-show="showPopup===true">*@

                                        <td hidden="hidden">
                                            <div data-ng-if="DatePicker.type==='individual'" class="individual">
                                                @*Selected Dates:*@
                                                <div class="well well-sm" style="display:none !important">
                                                    <div data-ng-repeat="d in DatePicker.selectedDates | orderBy">
                                                        {{d | date : "MM.dd.yyyy"}}
                                                        <button class="'btn btn-xs btn-green-reverse" style="margin: 5px" data-ng-click="DatePicker.removeFromSelected(d)">Remove</button>
                                                    </div>
                                                    <div data-ng-show="!DatePicker.selectedDates.length">
                                                        No dates selected
                                                    </div>
                                                </div>
                                            </div>

                                            <div data-ng-if='DatePicker.type==="range"' class="range">
                                                @*Selected Range:*@

                                                <div class="well well-sm" style="display:none !important">
                                                    {{(DatePicker.selectedDates | orderBy)[0] | date:"fullDate"}}
                                                    <span data-ng-if="DatePicker.selectedDates.length > 1">
                                                        - {{(DatePicker.selectedDates | orderBy : "-")[0] | date:"fullDate"}}
                                                    </span>
                                                    <div data-ng-show="!DatePicker.selectedDates.length">
                                                        No range selected
                                                    </div>
                                                    <button data-ng-if="DatePicker.selectedDates.length>1" class="'btn btn-xs btn-green-reverse" style="margin: 5px" data-ng-click="DatePicker.removeFromSelectedRenge()">Remove</button>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </div>


                            <div class="form-group">
                                <label class="col-md-2">Minimum Rental Period</label>
                                <div class="col-md-3">
                                    <input name="MinimumRentPeriod"
                                           data-ng-model="listingEditController.item.MinimumRentPeriod"
                                           type="text" autocomplete="off"
                                           class="form-control account-input"
                                           ng-change="listingEditController.ChangeMinimumPeriod()"
                                           data-ng-class="{'error-input': (create.MinimumRentPeriod.$dirty || create.$submitted) && (create.MinimumRentPeriod.$error.required || create.MinimumRentPeriod.$error.min)}" id="MinimumRentPeriod"
                                           required
                                           allow-only-numbers>
                                </div>
                                <span class="error-msg" data-ng-show="(create.MinimumRentPeriod.$dirty || create.$submitted) && create.MinimumRentPeriod.$error.required">
                                    Required
                                </span>
                                <span ng-if="listingEditController.item.IsMinimumperiodError" class="error-msg">
                                    {{listingEditController.item.MinimumPeriodMessage}}
                                </span>
                            </div>


                            <div class="form-group">
                                <label class="col-md-2">Start Time</label>
                                <div class="col-md-3">
                                    <input name="StartTime" data-ng-model="listingEditController.item.StartTime" type="text" autocomplete="off" class="form-control account-input" data-ng-class="{'error-input': (create.StartTime.$dirty || create.$submitted) && (create.StartTime.$error.required || create.StartTime.$error.min)}" *@ id="StartTime" required>
                                </div>
                                <span class="error-msg" data-ng-show="(create.StartTime.$dirty || create.$submitted) && create.StartTime.$error.required">
                                    Required
                                </span>
                            </div>

                            <div class="form-group" style="display:none">
                                <label class="col-md-2">End Time</label>
                                <div class="col-md-3">
                                    <input name="EndTime" data-ng-model="listingEditController.item.EndTime" type="text" autocomplete="off" class="form-control account-input" data-ng-class="{'error-input': (create.EndTime.$dirty || create.$submitted) && (create.EndTime.$error.required || create.EndTime.$error.min)}" id="EndTime" required>
                                </div>
                                <span class="error-msg" data-ng-show="(create.EndTime.$dirty || create.$submitted) && create.EndTime.$error.required">
                                    Required
                                </span>
                            </div>

                            <div class="form-group photos-form-group">

                                <label class="col-md-12 text-left itemPhotosListing">
                                    Item Photos
                                    <span class="message-info">(Your first image will be used as the main picture for your listing)</span>
                                </label>
                                <multiply-upload count-upload="5" value-images="listingEditController.arrayValueImages" exist-images="listingEditController.images"></multiply-upload>

                            </div>
                            <div data-ng-repeat="image in listingEditController.arrayValueImages">
                                <input type="hidden" name="Images[{{$index}}].Id" value="{{image.Id}}" />
                                <input type="hidden" name="Images[{{$index}}].FileName" value="{{image.FileName}}" />
                            </div>



                            <div class="text-right">
                                <button class="btn btn-green" type="button" onclick="javascript:document.getElementById('createItemForm').submit()">Save</button>
                                <a onclick="cancelfunc()" class="btn secondary-btn" id="cancelData" data-ng-hide="listingEditController.itemExists()">Cancel</a>
                                <i class="fa fa-spinner loading-animate"
                                   data-ng-show="listingEditController.deleting"></i>
                                <a class="btn secondary-btn"
                                   data-ng-show="listingEditController.itemExists()"
                                   data-ng-click="listingEditController.deleteItem()">Delete this item</a>
                            </div>


                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .itemPhotosListing span.message-info {
        text-align: left;
        display: block;
    }

    .rentPeriodSection input {
        position: relative;
        top: 2px;
    }

    .rentPeriodSection label {
        margin-right: 10px;
    }

    #divLoading {
        display: none !important;
    }
</style>
<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<!-- Popper.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.10.2/umd/popper.min.js"></script>

<!-- Bootstrap JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.6.0/js/bootstrap.min.js"></script>
@Scripts.Render("~/Scripts/Listing")
@*@Scripts.Render("~/Scripts/Libs/jquery")*@

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.0.12/dist/css/select2.min.css" rel="stylesheet" />
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css">
<script src="https://cdn.jsdelivr.net/npm/select2@4.0.12/dist/js/select2.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"></script>

<script>

    $(document).ready(function () {
        $('#StartTime').timepicker({

        });
        var jq = $.noConflict();
        jq('.dropNav').click(function () {
            jq('.dropNav').toggleClass('open')
        });
    });



    @*var data = [{ id: 0, text: 'enhancement' }, { id: 1, text: 'bug' }, { id: 2, text: 'duplicate' }, { id: 3, text: 'invalid' }, { id: 4, text: 'wontfix' }];
    $(document).ready(function () {

        $('#select2-Id').select2({
            multiple:true
         });
        var tagsCategory =  @Html.Raw(Json.Encode(TempData["categoryTags"]));

        if (tagsCategory != null) {
            var res = tagsCategory.split(",");
            $('#select2-Id').val(res).trigger('change');
        }
        else {
              var tagsCategoryInvalid =  @Html.Raw(Json.Encode(TempData["tagsInvalid"]));
            if (tagsCategoryInvalid != null) {
                var res2 = tagsCategoryInvalid.split(",");
                $('#select2-Id').val(res2).trigger('change');
            }
            //$('#select2-Id').val(res).trigger('change');
        }
        var arr = new Array;
        //var arrReturn = new Array;
        $('#select2-Id').on('select2:select', function (e) {

                   var data = e.params.data;
                   var doc = document.getElementById('createItemForm');
                   var trackObject = {};
            if (!trackObject.hasOwnProperty(data.id)) {

                if (arr.length < 1 && tagsCategoryInvalid != null) {
                    var _valueText = $('#select2-Id').val();
                    if (_valueText != null) {
                        arr.push(_valueText);
                    }
                }
                else {
                    arr.push(data.id);
                }

                   }
            $('#CategorList').val(arr);
        });
        var arrRemove = new Array;
        $('#select2-Id').on('select2:unselect', function (e) {
            ;
            arrRemove.push($('#select2-Id').val());
            $('#CategorList').val(arrRemove);
        });

           });*@



    var angularConstants = {
        CreateItem: {
            momentarilyItemDepositKey: '@MomentarilyItemProperties.MomentarilyItemDeposit',
            item: JSON.parse('@Html.Raw(HttpUtility.JavaScriptStringEncode(Json.Encode(Model.Item)))'),
            types: JSON.parse('@Html.Raw(Json.Encode(Model.Types))'),
            categories: JSON.parse('@Html.Raw(Json.Encode(Model.Categories))')
        },
        createAction: '@Url.Action("Create", "Listing")',
        editAction: '@Url.Action("Edit", "Listing")'
    };

    function cancelfunc() {
        var userConfirms = confirm("Are you sure you want to cancel?");
        if (userConfirms) {
            window.location.href = "/Listing/";
        }
    }

       if ('@ViewBag.Requires' != '') {
           alert("@ViewBag.Requires");

        }


    document.addEventListener("keydown", KeyCheck);
    function KeyCheck(event) {
        var KeyID = event.keyCode;
        switch (KeyID) {
            case 8:
                $(".error-priceDay").css("display", "none")
                $(".error-priceWeek").css("display", "none")
                break;
            case 46:
                break;
            default:
                break;
        }
    }

    $(document).on('keypress', '#price', function (e) {
        var currentValue = String.fromCharCode(e.which);
        var finalValue = $(this).val() + currentValue;
        if (finalValue > 15000 && e.keyCode !== 46 && e.keyCode !== 8) {
            e.preventDefault();
            $(".error-priceDay").css("display", "block").fadeOut(5000)
        }
        else {
            $(".error-priceDay").css("display", "none")
        }
    });

    $(document).on('keypress', '#pricePerWeek', function (e) {
        var currentValue = String.fromCharCode(e.which);
        var finalValue = $(this).val() + currentValue;
        if (finalValue > 15000) {
            e.preventDefault();
            $(".error-priceWeek").css("display", "block").fadeOut(5000)
        }
        else {
            $(".error-priceWeek").css("display", "none")
        }
    });
</script>


